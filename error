{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM1lK8uSLBqQ0CvgHPPNd9R",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/OceanMin03/program-J/blob/main/AI%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_3%EC%9E%A5_%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xn9sWGcI_Wkq",
        "outputId": "fed409a1-3614-45e5-e4d7-a4eed32795a2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "220의 친화수 284\n",
            "284의 친화수 220\n",
            "1184의 친화수 1210\n",
            "1210의 친화수 1184\n",
            "2620의 친화수 2924\n",
            "2924의 친화수 2620\n",
            "5020의 친화수 5564\n",
            "5564의 친화수 5020\n",
            "6232의 친화수 6368\n",
            "6368의 친화수 6232\n",
            "10744의 친화수 10856\n",
            "10856의 친화수 10744\n",
            "12285의 친화수 14595\n",
            "14595의 친화수 12285\n",
            "17296의 친화수 18416\n",
            "18416의 친화수 17296\n"
          ]
        }
      ],
      "source": [
        "#AI프로그래밍및실습 #3장연습문제풀이 #홀수문항\n",
        "\n",
        "#3.1\n",
        "print(100 > 200)\n",
        "print(100 >= 200)\n",
        "print(100 < 200)\n",
        "print(100 <= 200)\n",
        "print(100 == 200)\n",
        "print(100 != 200)\n",
        "print(200 == 200)\n",
        "print(200 != 200)\n",
        "print(True or True)\n",
        "print(True or False)\n",
        "print(True and False)\n",
        "print(True and True)\n",
        "print(True or True and False)\n",
        "print(True and True or False)\n",
        "print('Morning' < 'morning')\n",
        "print('A' > 'B')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.3\n",
        "age = int(input(\"나이를 입력하시오 : \"))\n",
        "height = int(input(\"키를 입력하시오(단위cm) : \"))\n",
        "\n",
        "if age >= 19 and height >= 150:\n",
        "  print(\"입장할 수 있습니다\")\n",
        "else:\n",
        "    print(\"입장할 수 없습니다\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.5\n",
        "num1, num2 = map(int, input(\"두 개의 정수를 입력하세요: \").split())\n",
        "\n",
        "if num1 < num2:\n",
        "    print(num1, num2)\n",
        "else:\n",
        "    print(num2, num1)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.7\n",
        "score = int(input(\"게임점수를 입력하시오 : \"))\n",
        "\n",
        "if score <= 1000:\n",
        "  print(\"입문자입니다.\")\n",
        "else:\n",
        "  print(\"고수입니다.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.9\n",
        "num = int(input(\"정수를 입력하시오: \"))\n",
        "\n",
        "divisible_by_2 = num % 2 == 0\n",
        "divisible_by_3 = num % 3 == 0\n",
        "\n",
        "if divisible_by_2:\n",
        "    print(\"{}는(은) 2로 나누어집니다.\".format(num))\n",
        "else:\n",
        "    print(\"{}는(은) 2로 나누어지지 않습니다.\".format(num))\n",
        "\n",
        "if divisible_by_3:\n",
        "    print(\"{}는(은) 3로 나누어집니다.\".format(num))\n",
        "else:\n",
        "    print(\"{}는(은) 3로 나누어지지 않습니다.\".format(num))\n",
        "\n",
        "if divisible_by_2 and divisible_by_3:\n",
        "    print(\"{}는(은) 2와 3 모두로 나누어집니다.\".format(num))\n",
        "else:\n",
        "    print(\"{}는(은) 2와 3 모두로 나누어지지 않습니다.\".format(num))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.11\n",
        "\n",
        "winning_numbers = [2, 3, 9]\n",
        "\n",
        "user_numbers = list(map(int, input(\"세 복권번호를 입력하시오 : \").split()))\n",
        "\n",
        "correct_count = sum(num in winning_numbers for num in user_numbers)\n",
        "\n",
        "if correct_count == 3:\n",
        "    print(\"1억 원\")\n",
        "elif correct_count == 2:\n",
        "    print(\"1천만 원\")\n",
        "elif correct_count == 1:\n",
        "    print(\"1만 원\")\n",
        "else:\n",
        "    print(\"다음 기회에...\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.13\n",
        "import math\n",
        "\n",
        "center_x, center_y = 3, 4\n",
        "radius = 10\n",
        "\n",
        "x_str, y_str = input(\"점의 좌표 x와 y를 입력하세요 : \").split()\n",
        "x, y = float(x_str), float(y_str)\n",
        "\n",
        "distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)\n",
        "\n",
        "if distance <= radius:\n",
        "    print(\"원의 내부에 있음\")\n",
        "else:\n",
        "    print(\"원의 외부에 있음\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.15\n",
        "#1) for 문\n",
        "for i in range(1, 10):\n",
        "    print(\"2 *\", i, \"=\", 2*i)\n",
        "\n",
        "#2) while\n",
        "i = 1\n",
        "while i < 10:\n",
        "    print(\"2 *\", i, \"=\", 2*i)\n",
        "    i += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.17\n",
        "#(1)\n",
        "for i in range(3):\n",
        "  print('Python ')\n",
        "  print('is ')\n",
        "  print('FUN! ')\n",
        "\n",
        "#(2)\n",
        "for i in range(3):\n",
        "  print('Python ')\n",
        "  print('is ')\n",
        "print('FUN! ')\n",
        "\n",
        "#(3)\n",
        "for i in range(3):\n",
        "  print('Python ')\n",
        "print('is ')\n",
        "print('FUN! ')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.19\n",
        "print(\"맛나 식당에 오신 것을 환영합니다. 메뉴는 다음과 같습니다.\")\n",
        "print(\"- 햄버거(입력 b)\")\n",
        "print(\"- 치킨(입력 c)\")\n",
        "print(\"- 피자(입력 p)\")\n",
        "\n",
        "while True:\n",
        "    choice = input(\"메뉴를 선택하세요(알파벳 b, c, p 입력) : \")\n",
        "    if choice in ['b', 'c', 'p']:\n",
        "        break\n",
        "    else:\n",
        "        print(\"메뉴를 다시 입력하세요(알파벳 b, c, p 입력) : \")\n",
        "\n",
        "if choice == 'b':\n",
        "    print(\"햄버거를 선택하였습니다.\")\n",
        "elif choice == 'c':\n",
        "    print(\"치킨을 선택하였습니다.\")\n",
        "else:\n",
        "    print(\"피자를 선택하였습니다.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.21\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    elif n <= 3:\n",
        "        return True\n",
        "    elif n % 2 == 0:\n",
        "        return False\n",
        "    else:\n",
        "\n",
        "        for i in range(3, int(n**0.5) + 1, 2):\n",
        "            if n % i == 0:\n",
        "                return False\n",
        "        return True\n",
        "\n",
        "num = int(input(\"숫자를 입력하세요: \"))\n",
        "\n",
        "if is_prime(num):\n",
        "    print(f\"{num}은(는) 소수입니다.\")\n",
        "else:\n",
        "    print(f\"{num}은(는) 소수가 아닙니다.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.23\n",
        "def sum_of_squares(n):\n",
        "    total = 0\n",
        "    for i in range(1, n + 1):\n",
        "        total += i ** 2\n",
        "    return total\n",
        "\n",
        "num = int(input(\"숫자를 입력하세요: \"))\n",
        "\n",
        "result = sum_of_squares(num)\n",
        "print(f\"결과는 {result}입니다.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.25\n",
        "depth = 30  # 우물의 깊이\n",
        "climb_per_day = 7  # 하루 종일 기어서 올라가는 거리\n",
        "slide_per_night = 5  # 밤에 내려가는 거리\n",
        "\n",
        "snail_position = 7  # 달팽이의 초기 위치\n",
        "days = 0  # 경과한 날짜\n",
        "\n",
        "print(\"day : 1   달팽이의 위치 : 7미터\")\n",
        "\n",
        "while days > 1 and snail_position < depth:\n",
        "    days += 1\n",
        "    snail_position += climb_per_day\n",
        "\n",
        "    if snail_position >= depth:\n",
        "      break\n",
        "\n",
        "      snail_position -= slide_per_night\n",
        "    print(f\"day : {days + 1}   달팽이의 위치 : {snail_position}미터\")\n",
        "\n",
        "print(\"\\n우물을 탈출하는 데 걸린 날은\", days, \"일 입니다.\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.27\n",
        "def is_armstrong(num):\n",
        "    # 각 자리수의 세제곱의 합 계산\n",
        "    sum_of_cubes = sum(int(digit) ** 3 for digit in str(num))\n",
        "    # 입력된 수와 세제곱의 합이 같으면 True 반환\n",
        "    return num == sum_of_cubes\n",
        "\n",
        "# 세 자리 정수 중에서 암스트롱 수 찾기\n",
        "armstrong_numbers = [num for num in range(100, 1000) if is_armstrong(num)]\n",
        "\n",
        "# 찾은 암스트롱 수 출력\n",
        "print(\"세 자리의 암스트롱 수:\", \" \".join(map(str, armstrong_numbers)))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.29\n",
        "fuel_level = 500\n",
        "\n",
        "while True:\n",
        "    action = input(\"충전 또는 사용한 연료를 +/- 기호와 함께 입력하시오: \")\n",
        "\n",
        "    if action.startswith('+'):\n",
        "        fuel_added = int(action[1:])\n",
        "        fuel_level += fuel_added\n",
        "    elif action.startswith('-'):\n",
        "        fuel_used = int(action[1:])\n",
        "        fuel_level -= fuel_used\n",
        "\n",
        "    print(\"현재 탱크양은 {}입니다.\".format(fuel_level))\n",
        "\n",
        "    if fuel_level < 50:\n",
        "        print(\"경고: 연료가 10% 미만이니 충전하세요!\")\n",
        "        break\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#3.31\n",
        "def sum_of_divisors(n):\n",
        "    divisor_sum = 1\n",
        "    for i in range(2, int(n**0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            divisor_sum += i\n",
        "            if i != n // i:\n",
        "                divisor_sum += n // i\n",
        "    return divisor_sum\n",
        "\n",
        "def find_amicable_numbers(limit):\n",
        "    amicable_pairs = []\n",
        "    for num in range(2, limit + 1):\n",
        "        partner = sum_of_divisors(num)\n",
        "        if partner > num and sum_of_divisors(partner) == num:\n",
        "            amicable_pairs.append((num, partner))\n",
        "    return amicable_pairs\n",
        "\n",
        "# 1에서 20,000 사이의 친화수를 찾음\n",
        "limit = 20000\n",
        "amicable_pairs = find_amicable_numbers(limit)\n",
        "\n",
        "# 결과 출력\n",
        "for pair in amicable_pairs:\n",
        "    print(\"{}의 친화수 {}\".format(pair[0], pair[1]))\n",
        "    print(\"{}의 친화수 {}\".format(pair[1], pair[0]))\n",
        "\n"
      ]
    }
  ]
}
